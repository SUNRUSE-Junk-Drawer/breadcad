#ifndef BC_OPCODE_H
#define BC_OPCODE_H

#include <stdio.h>
#include "types.h"
#include "primitive.h"

typedef bc_u16_t bc_opcode_t;

typedef bc_u8_t bc_opcode_id_t;
#define BC_OPCODE_ID_MAX BC_U8_MAX
#define BC_OPCODE_ID_RANGE BC_U8_RANGE

typedef bc_u8_t bc_opcode_arity_t;
#define BC_OPCODE_ARITY_MAX 3

#define BC_OPCODE_ID_NOT 0x00
#define BC_OPCODE_ID_AND 0x00
#define BC_OPCODE_ID_OR 0x01
#define BC_OPCODE_ID_EQUAL 0x02
#define BC_OPCODE_ID_NOT_EQUAL 0x03
#define BC_OPCODE_ID_CONDITIONAL_BOOLEAN 0x00
#define BC_OPCODE_ID_GREATER_THAN 0x00
#define BC_OPCODE_ID_PARAMETER(id) (0x00 + id)
#define BC_OPCODE_ID_PARAMETER_MIN BC_OPCODE_PARAMETER(0)
#define BC_OPCODE_ID_PARAMETER_MAX BC_OPCODE_PARAMETER(BC_U8_MAX)
#define BC_OPCODE_ID_CONDITIONAL_NUMBER 0x00
#define BC_OPCODE_ID_NEGATE 0x00
#define BC_OPCODE_ID_SINE 0x01
#define BC_OPCODE_ID_COSINE 0x02
#define BC_OPCODE_ID_TANGENT 0x03
#define BC_OPCODE_ID_ARC_SINE 0x04
#define BC_OPCODE_ID_ARC_COSINE 0x05
#define BC_OPCODE_ID_ARC_TANGENT 0x06
#define BC_OPCODE_ID_HYPERBOLIC_SINE 0x07
#define BC_OPCODE_ID_HYPERBOLIC_COSINE 0x08
#define BC_OPCODE_ID_HYPERBOLIC_TANGENT 0x09
#define BC_OPCODE_ID_HYPERBOLIC_ARC_SINE 0x0A
#define BC_OPCODE_ID_HYPERBOLIC_ARC_COSINE 0x0B
#define BC_OPCODE_ID_HYPERBOLIC_ARC_TANGENT 0x0C
#define BC_OPCODE_ID_ABSOLUTE 0x0D
#define BC_OPCODE_ID_SQUARE_ROOT 0x0E
#define BC_OPCODE_ID_FLOOR 0x0F
#define BC_OPCODE_ID_CEILING 0x10
#define BC_OPCODE_ID_NATURAL_LOGARITHM 0x11
#define BC_OPCODE_ID_LOGARITHM_10 0x12
#define BC_OPCODE_ID_NATURAL_POWER 0x13
#define BC_OPCODE_ID_ADD 0x00
#define BC_OPCODE_ID_SUBTRACT 0x01
#define BC_OPCODE_ID_MULTIPLY 0x02
#define BC_OPCODE_ID_DIVIDE 0x03
#define BC_OPCODE_ID_POWER 0x04
#define BC_OPCODE_ID_MODULO 0x05
#define BC_OPCODE_ID_ARC_TANGENT_2 0x06
#define BC_OPCODE_ID_MINIMUM 0x07
#define BC_OPCODE_ID_MAXIMUM 0x08

#define BC_OPCODE(result, argument_a, argument_b, argument_c, id) ((result * BC_PRIMITIVE_RANGE * BC_PRIMITIVE_RANGE * BC_PRIMITIVE_RANGE * BC_OPCODE_ID_RANGE) + (argument_a * BC_PRIMITIVE_RANGE * BC_PRIMITIVE_RANGE * BC_OPCODE_ID_RANGE) + (argument_b * BC_PRIMITIVE_RANGE * BC_OPCODE_ID_RANGE) + (argument_c * BC_OPCODE_ID_RANGE) + (id))

#define BC_OPCODE_NOT BC_OPCODE(BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_NOT)
#define BC_OPCODE_AND BC_OPCODE(BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_NONE, BC_OPCODE_ID_AND)
#define BC_OPCODE_OR BC_OPCODE(BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_NONE, BC_OPCODE_ID_OR)
#define BC_OPCODE_EQUAL BC_OPCODE(BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_NONE, BC_OPCODE_ID_EQUAL)
#define BC_OPCODE_NOT_EQUAL BC_OPCODE(BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_NONE, BC_OPCODE_ID_NOT_EQUAL)
#define BC_OPCODE_CONDITIONAL_BOOLEAN BC_OPCODE(BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_BOOLEAN, BC_OPCODE_ID_CONDITIONAL_BOOLEAN)
#define BC_OPCODE_GREATER_THAN BC_OPCODE(BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_OPCODE_ID_GREATER_THAN)
#define BC_OPCODE_PARAMETER(id) BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, id)
#define BC_OPCODE_PARAMETER_MIN BC_OPCODE_PARAMETER(0)
#define BC_OPCODE_PARAMETER_MAX BC_OPCODE_PARAMETER(BC_U8_MAX)
#define BC_OPCODE_CONDITIONAL_NUMBER BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_BOOLEAN, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_OPCODE_ID_CONDITIONAL_NUMBER)
#define BC_OPCODE_NEGATE BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_NEGATE)
#define BC_OPCODE_SINE BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_SINE)
#define BC_OPCODE_COSINE BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_COSINE)
#define BC_OPCODE_TANGENT BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_TANGENT)
#define BC_OPCODE_ARC_SINE BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_ARC_SINE)
#define BC_OPCODE_ARC_COSINE BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_ARC_COSINE)
#define BC_OPCODE_ARC_TANGENT BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_ARC_TANGENT)
#define BC_OPCODE_HYPERBOLIC_SINE BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_HYPERBOLIC_SINE)
#define BC_OPCODE_HYPERBOLIC_COSINE BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_HYPERBOLIC_COSINE)
#define BC_OPCODE_HYPERBOLIC_TANGENT BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_HYPERBOLIC_TANGENT)
#define BC_OPCODE_HYPERBOLIC_ARC_SINE BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_HYPERBOLIC_ARC_SINE)
#define BC_OPCODE_HYPERBOLIC_ARC_COSINE BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_HYPERBOLIC_ARC_COSINE)
#define BC_OPCODE_HYPERBOLIC_ARC_TANGENT BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_HYPERBOLIC_ARC_TANGENT)
#define BC_OPCODE_ABSOLUTE BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_ABSOLUTE)
#define BC_OPCODE_SQUARE_ROOT BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_SQUARE_ROOT)
#define BC_OPCODE_FLOOR BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_FLOOR)
#define BC_OPCODE_CEILING BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_CEILING)
#define BC_OPCODE_NATURAL_LOGARITHM BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_NATURAL_LOGARITHM)
#define BC_OPCODE_LOGARITHM_10 BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_LOGARITHM_10)
#define BC_OPCODE_NATURAL_POWER BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_PRIMITIVE_NONE, BC_OPCODE_ID_NATURAL_POWER)
#define BC_OPCODE_ADD BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_OPCODE_ID_ADD)
#define BC_OPCODE_SUBTRACT BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_OPCODE_ID_SUBTRACT)
#define BC_OPCODE_MULTIPLY BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_OPCODE_ID_MULTIPLY)
#define BC_OPCODE_DIVIDE BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_OPCODE_ID_DIVIDE)
#define BC_OPCODE_POWER BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_OPCODE_ID_POWER)
#define BC_OPCODE_MODULO BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_OPCODE_ID_MODULO)
#define BC_OPCODE_ARC_TANGENT_2 BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_OPCODE_ID_ARC_TANGENT_2)
#define BC_OPCODE_MINIMUM BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_OPCODE_ID_MINIMUM)
#define BC_OPCODE_MAXIMUM BC_OPCODE(BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NUMBER, BC_PRIMITIVE_NONE, BC_OPCODE_ID_MAXIMUM)

bc_primitive_t bc_opcode_result(
  bc_opcode_t opcode
);

bc_primitive_t bc_opcode_parameter_a(
  bc_opcode_t opcode
);

bc_primitive_t bc_opcode_parameter_b(
  bc_opcode_t opcode
);

bc_primitive_t bc_opcode_parameter_c(
  bc_opcode_t opcode
);

bc_opcode_arity_t bc_opcode_arity(
  bc_opcode_t opcode
);

bc_opcode_id_t bc_opcode_id(
  bc_opcode_t opcode
);

void bc_opcode_print(
  FILE * file,
  bc_opcode_t opcode
);

#endif
